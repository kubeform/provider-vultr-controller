/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Kubernetes struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KubernetesSpec   `json:"spec,omitempty"`
	Status            KubernetesStatus `json:"status,omitempty"`
}

type KubernetesSpecNodePoolsNodes struct {
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Label *string `json:"label,omitempty" tf:"label"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type KubernetesSpecNodePools struct {
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	DateUpdated *string `json:"dateUpdated,omitempty" tf:"date_updated"`
	// +optional
	ID           *string `json:"ID,omitempty" tf:"id"`
	Label        *string `json:"label" tf:"label"`
	NodeQuantity *int64  `json:"nodeQuantity" tf:"node_quantity"`
	// +optional
	Nodes []KubernetesSpecNodePoolsNodes `json:"nodes,omitempty" tf:"nodes"`
	Plan  *string                        `json:"plan" tf:"plan"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
}

type KubernetesSpec struct {
	State *KubernetesSpecResource `json:"state,omitempty" tf:"-"`

	Resource KubernetesSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type KubernetesSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ClusterSubnet *string `json:"clusterSubnet,omitempty" tf:"cluster_subnet"`
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	Ip *string `json:"ip,omitempty" tf:"ip"`
	// Base64 encoded KubeConfig
	// +optional
	KubeConfig *string                  `json:"kubeConfig,omitempty" tf:"kube_config"`
	Label      *string                  `json:"label" tf:"label"`
	NodePools  *KubernetesSpecNodePools `json:"nodePools" tf:"node_pools"`
	Region     *string                  `json:"region" tf:"region"`
	// +optional
	ServiceSubnet *string `json:"serviceSubnet,omitempty" tf:"service_subnet"`
	// +optional
	Status  *string `json:"status,omitempty" tf:"status"`
	Version *string `json:"version" tf:"version"`
}

type KubernetesStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KubernetesList is a list of Kubernetess
type KubernetesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Kubernetes CRD objects
	Items []Kubernetes `json:"items,omitempty"`
}
