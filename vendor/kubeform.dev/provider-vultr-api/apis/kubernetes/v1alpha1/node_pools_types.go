/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NodePools struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodePoolsSpec   `json:"spec,omitempty"`
	Status            NodePoolsStatus `json:"status,omitempty"`
}

type NodePoolsSpecNodes struct {
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Label *string `json:"label,omitempty" tf:"label"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type NodePoolsSpec struct {
	State *NodePoolsSpecResource `json:"state,omitempty" tf:"-"`

	Resource NodePoolsSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type NodePoolsSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ClusterID *string `json:"clusterID" tf:"cluster_id"`
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	DateUpdated  *string `json:"dateUpdated,omitempty" tf:"date_updated"`
	Label        *string `json:"label" tf:"label"`
	NodeQuantity *int64  `json:"nodeQuantity" tf:"node_quantity"`
	// +optional
	Nodes []NodePoolsSpecNodes `json:"nodes,omitempty" tf:"nodes"`
	Plan  *string              `json:"plan" tf:"plan"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
}

type NodePoolsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NodePoolsList is a list of NodePoolss
type NodePoolsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NodePools CRD objects
	Items []NodePools `json:"items,omitempty"`
}
