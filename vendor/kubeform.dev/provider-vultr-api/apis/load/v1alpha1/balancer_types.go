/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Balancer struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerSpec   `json:"spec,omitempty"`
	Status            BalancerStatus `json:"status,omitempty"`
}

type BalancerSpecFirewallRules struct {
	// +optional
	ID     *string `json:"ID,omitempty" tf:"id"`
	IpType *string `json:"ipType" tf:"ip_type"`
	Port   *int64  `json:"port" tf:"port"`
	Source *string `json:"source" tf:"source"`
}

type BalancerSpecForwardingRules struct {
	BackendPort      *int64  `json:"backendPort" tf:"backend_port"`
	BackendProtocol  *string `json:"backendProtocol" tf:"backend_protocol"`
	FrontendPort     *int64  `json:"frontendPort" tf:"frontend_port"`
	FrontendProtocol *string `json:"frontendProtocol" tf:"frontend_protocol"`
	// +optional
	RuleID *string `json:"ruleID,omitempty" tf:"rule_id"`
}

type BalancerSpecHealthCheck struct {
	CheckInterval    *int64 `json:"checkInterval" tf:"check_interval"`
	HealthyThreshold *int64 `json:"healthyThreshold" tf:"healthy_threshold"`
	// +optional
	Path               *string `json:"path,omitempty" tf:"path"`
	Port               *int64  `json:"port" tf:"port"`
	Protocol           *string `json:"protocol" tf:"protocol"`
	ResponseTimeout    *int64  `json:"responseTimeout" tf:"response_timeout"`
	UnhealthyThreshold *int64  `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type BalancerSpecSsl struct {
	Certificate *string `json:"certificate" tf:"certificate"`
	// +optional
	Chain      *string `json:"chain,omitempty" tf:"chain"`
	PrivateKey *string `json:"-" sensitive:"true" tf:"private_key"`
}

type BalancerSpec struct {
	State *BalancerSpecResource `json:"state,omitempty" tf:"-"`

	Resource BalancerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type BalancerSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AttachedInstances []string `json:"attachedInstances,omitempty" tf:"attached_instances"`
	// +optional
	BalancingAlgorithm *string `json:"balancingAlgorithm,omitempty" tf:"balancing_algorithm"`
	// +optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name"`
	// +optional
	FirewallRules []BalancerSpecFirewallRules `json:"firewallRules,omitempty" tf:"firewall_rules"`
	// +kubebuilder:validation:MinItems=1
	ForwardingRules []BalancerSpecForwardingRules `json:"forwardingRules" tf:"forwarding_rules"`
	// +optional
	HasSsl *bool `json:"hasSsl,omitempty" tf:"has_ssl"`
	// +optional
	HealthCheck *BalancerSpecHealthCheck `json:"healthCheck,omitempty" tf:"health_check"`
	// +optional
	Ipv4 *string `json:"ipv4,omitempty" tf:"ipv4"`
	// +optional
	Ipv6 *string `json:"ipv6,omitempty" tf:"ipv6"`
	// +optional
	Label *string `json:"label,omitempty" tf:"label"`
	// +optional
	PrivateNetwork *string `json:"privateNetwork,omitempty" tf:"private_network"`
	// +optional
	ProxyProtocol *bool   `json:"proxyProtocol,omitempty" tf:"proxy_protocol"`
	Region        *string `json:"region" tf:"region"`
	// +optional
	Ssl *BalancerSpecSsl `json:"ssl,omitempty" tf:"ssl"`
	// +optional
	SslRedirect *bool `json:"sslRedirect,omitempty" tf:"ssl_redirect"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type BalancerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BalancerList is a list of Balancers
type BalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Balancer CRD objects
	Items []Balancer `json:"items,omitempty"`
}
