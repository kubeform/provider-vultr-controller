/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Instance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec,omitempty"`
	Status            InstanceStatus `json:"status,omitempty"`
}

type InstanceSpecBackupsSchedule struct {
	// +optional
	Dom *int64 `json:"dom,omitempty" tf:"dom"`
	// +optional
	Dow *int64 `json:"dow,omitempty" tf:"dow"`
	// +optional
	Hour *int64  `json:"hour,omitempty" tf:"hour"`
	Type *string `json:"type" tf:"type"`
}

type InstanceSpec struct {
	State *InstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type InstanceSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ActivationEmail *bool `json:"activationEmail,omitempty" tf:"activation_email"`
	// +optional
	AllowedBandwidth *int64 `json:"allowedBandwidth,omitempty" tf:"allowed_bandwidth"`
	// +optional
	AppID *int64 `json:"appID,omitempty" tf:"app_id"`
	// +optional
	Backups *string `json:"backups,omitempty" tf:"backups"`
	// +optional
	BackupsSchedule *InstanceSpecBackupsSchedule `json:"backupsSchedule,omitempty" tf:"backups_schedule"`
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	DdosProtection *bool `json:"ddosProtection,omitempty" tf:"ddos_protection"`
	// +optional
	DefaultPassword *string `json:"-" sensitive:"true" tf:"default_password"`
	// +optional
	Disk *int64 `json:"disk,omitempty" tf:"disk"`
	// +optional
	EnableIpv6 *bool `json:"enableIpv6,omitempty" tf:"enable_ipv6"`
	// +optional
	// Deprecated
	EnablePrivateNetwork *bool `json:"enablePrivateNetwork,omitempty" tf:"enable_private_network"`
	// +optional
	Features []string `json:"features,omitempty" tf:"features"`
	// +optional
	FirewallGroupID *string `json:"firewallGroupID,omitempty" tf:"firewall_group_id"`
	// +optional
	GatewayV4 *string `json:"gatewayV4,omitempty" tf:"gateway_v4"`
	// +optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`
	// +optional
	InternalIP *string `json:"internalIP,omitempty" tf:"internal_ip"`
	// +optional
	IsoID *string `json:"isoID,omitempty" tf:"iso_id"`
	// +optional
	Kvm *string `json:"kvm,omitempty" tf:"kvm"`
	// +optional
	Label *string `json:"label,omitempty" tf:"label"`
	// +optional
	MainIP *string `json:"mainIP,omitempty" tf:"main_ip"`
	// +optional
	NetmaskV4 *string `json:"netmaskV4,omitempty" tf:"netmask_v4"`
	// +optional
	Os *string `json:"os,omitempty" tf:"os"`
	// +optional
	OsID *int64  `json:"osID,omitempty" tf:"os_id"`
	Plan *string `json:"plan" tf:"plan"`
	// +optional
	PowerStatus *string `json:"powerStatus,omitempty" tf:"power_status"`
	// +optional
	PrivateNetworkIDS []string `json:"privateNetworkIDS,omitempty" tf:"private_network_ids"`
	// +optional
	Ram    *int64  `json:"ram,omitempty" tf:"ram"`
	Region *string `json:"region" tf:"region"`
	// +optional
	ReservedIPID *string `json:"reservedIPID,omitempty" tf:"reserved_ip_id"`
	// +optional
	ScriptID *string `json:"scriptID,omitempty" tf:"script_id"`
	// +optional
	ServerStatus *string `json:"serverStatus,omitempty" tf:"server_status"`
	// +optional
	SnapshotID *string `json:"snapshotID,omitempty" tf:"snapshot_id"`
	// +optional
	SshKeyIDS []string `json:"sshKeyIDS,omitempty" tf:"ssh_key_ids"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// +optional
	UserData *string `json:"userData,omitempty" tf:"user_data"`
	// +optional
	V6MainIP *string `json:"v6MainIP,omitempty" tf:"v6_main_ip"`
	// +optional
	V6Network *string `json:"v6Network,omitempty" tf:"v6_network"`
	// +optional
	V6NetworkSize *int64 `json:"v6NetworkSize,omitempty" tf:"v6_network_size"`
	// +optional
	VcpuCount *int64 `json:"vcpuCount,omitempty" tf:"vcpu_count"`
}

type InstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceList is a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Instance CRD objects
	Items []Instance `json:"items,omitempty"`
}
